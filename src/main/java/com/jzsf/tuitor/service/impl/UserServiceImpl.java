package com.jzsf.tuitor.service.impl;import com.jzsf.tuitor.common.utils.MD5Utils;import com.jzsf.tuitor.common.utils.RandomCaptcha;import com.jzsf.tuitor.common.utils.UUIDUtil;import com.jzsf.tuitor.dao.UserDao;import com.jzsf.tuitor.pojo.*;import com.jzsf.tuitor.rpcDomain.RegisterReq;import com.jzsf.tuitor.rpcDomain.RespResult;import com.jzsf.tuitor.rpcDomain.ResultCode;import com.jzsf.tuitor.service.*;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Service;import java.util.Date;/** * @author by plain yuan * @since 2020/04/12 */@Servicepublic class UserServiceImpl extends BaseServiceImpl<User, String> implements UserService {    @Autowired    private UserDao userDao;    @Autowired    private RegisterRecordService registerRecordService;    @Autowired    private MailService mailService;    @Autowired    private AddressService addressService;    @Autowired    private UserPreferenceService userPreferenceService;    @Autowired    private UserTagService userTagService;    @Autowired    private UserProfileService userProfileService;    @Override    protected JpaRepository<User, String> getRepository() {        return userDao;    }    @Override    public RespResult beforeRegister(RegisterReq reqInfo) {        // 无效的注册        if (StringUtils.isNotBlank(reqInfo.getCaptcha())                || StringUtils.isBlank(reqInfo.getEmail())                || StringUtils.isBlank(reqInfo.getPassword())                || StringUtils.isBlank(reqInfo.getUsername())) {            return new RespResult(ResultCode.REG_DATA_IS_WRONG);        }        // 检查是否注册        if (registerRecordService.checkRegister(reqInfo.getEmail())) {            return new RespResult(ResultCode.USER_HAS_REGISTERED);        }        // 获取验证码        String captcha = RandomCaptcha.get();        // 保存注册记录        RegisterRecord registerRecord = new RegisterRecord();        registerRecord.setId(registerRecordService.getUUID());        registerRecord.setUsername(reqInfo.getUsername());        registerRecord.setEmail(reqInfo.getEmail());        registerRecord.setCaptcha(captcha);        registerRecord.setSendTime(new Date());        registerRecordService.save(registerRecord);        // 保存用户        User user = new User();        user.setUsername(reqInfo.getUsername());        user.setPassword(MD5Utils.getMD5(reqInfo.getPassword()));        user.setId(UUIDUtil.getUUID());        userDao.save(user);        // 发送邮件        StringBuilder contentBuilder = new StringBuilder();        contentBuilder.append("您好，").append(reqInfo.getUsername()).append("，您的验证码是 ：").append(captcha);        mailService.sendSimpleMail(reqInfo.getEmail(), "新用户注册", contentBuilder.toString());        return new RespResult(ResultCode.REGISTER_CAPTCHA_SEND);    }    @Override    public boolean checkCaptcha(RegisterReq reqInfo) {        String captcha = registerRecordService.getCaptchaByUsername(reqInfo.getUsername());        return StringUtils.equals(reqInfo.getCaptcha(), captcha);    }    @Override    public RespResult registerUser(RegisterReq reqInfo) {        User user = userDao.getByUsername(reqInfo.getUsername());        user.setIsVerified("1");        userDao.save(user);        initUserInfo(user);        return new RespResult(ResultCode.REGISTERED_SUCCESS);    }    @Override    public boolean checkValid(User user) {        return user != null && StringUtils.equals("1", user.getIsVerified());    }    /**     * 用户注册成功时，初始化新用户的信息     */    private void initUserInfo(User user) {        String userId = user.getId();        Address address = new Address();        address.setUserId(userId);        UserPreference userPreference = new UserPreference();        userPreference.setUserId(userId);        UserProfile userProfile = new UserProfile();        userProfile.setUserId(userId);        userPreference.setSysMessageNotice("1");        userPreference.setTodoNotice("1");        userPreference.setOtherUserMessageNotice("1");        UserTag userTag = new UserTag();        userTag.setUserId(userId);        addressService.save(address);        userPreferenceService.save(userPreference);        userProfileService.save(userProfile);        userTagService.save(userTag);    }    @Override    public User getByUsername(String username) {        return userDao.getByUsername(username);    }}